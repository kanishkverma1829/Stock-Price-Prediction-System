# -*- coding: utf-8 -*-
"""SPPS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ppI9534ZqOCeEJa0rBDNz_G9iZhK9wi4

## ***STOCK PRICE PREDICTION SYSTEM***
"""

#IMPORT THE LIBRARIES
import pandas as pd
import numpy as np
import math
from datetime import datetime
import pandas_datareader as data
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, Dropout, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#GET THE STOCK DATA
start='2010-01-01'
end= '2019-12-31'

df = yf.download('TATAMOTORS.NS', start, end,)
df

df= df.reset_index()
df.head()

df=df.drop(['Date','Adj Close'], axis = 1)
df.head()

#VISUALIZE THE CLOSING PRICE HISTORY
plt.figure(figsize=(16,8))
plt.title('Close Price History')
plt.plot(df['Close'])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price INR', fontsize=18)
plt.show()

#MOVING AVERAGE OF 100 DAYS
ma100 = df.Close.rolling(100).mean()
ma100

#VISUALIZE THE MA
plt.figure(figsize=(16,8))
plt.plot(df['Close'])
plt.plot(ma100, 'r')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price INR', fontsize=18)
plt.show()

#MOVING AVERAGE OF 200 DAYS
ma200 = df.Close.rolling(200).mean()
ma200

plt.figure(figsize=(16,8))
plt.plot(df['Close'])
plt.plot(ma100, 'r')
plt.plot(ma200, 'g')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price INR', fontsize=18)
plt.show()

data_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])
data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):int(len(df))])

print(data_training.shape)
print(data_testing.shape)

#SCALE THE DATA
scaler = MinMaxScaler(feature_range= (0,1))

data_training_array= scaler.fit_transform(data_training)
data_training_array

#CREATE THE TRAINING DATA SET
x_train=[]
y_train=[]

for i in range(100 , data_training_array.shape[0]):
    x_train.append(data_training_array[i-100:i])
    y_train.append(data_training_array[i ,0])

x_train = np.array(x_train)
y_train = np.array(y_train)

model= Sequential()
model.add(LSTM(units=50 , activation = 'relu' , return_sequences= True ,
               input_shape = (x_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units= 60 , activation = 'relu' , return_sequences= True))
model.add(Dropout(0.3))

model.add(LSTM(units= 80 , activation = 'relu' , return_sequences= True ))
model.add(Dropout(0.4))

model.add(LSTM(units= 120 , activation = 'relu' ))
model.add(Dropout(0.5))

model.add(Dense(units = 1))

model.summary()

model.compile(optimizer = 'adam', loss = 'mean_squared_error')
model.fit(x_train, y_train, epochs = 50)

model.save('keras_model.h5')

data_testing.tail(100)

past_100_days = data_training.tail(100)

final_df = past_100_days.append(data_testing, ignore_index = True)

input_data = scaler.fit_transform(final_df)
input_data

#CREATE TESTING DATA SET
x_test = []
y_test = []

for i in range(100, input_data.shape[0]):
    x_test.append(input_data[i-100: i])
    y_test.append(input_data[i, 0])

x_test, y_test = np.array(x_test), np.array(y_test)
print(x_test.shape)
print(y_test.shape)

y_predicted = model.predict(x_test)

y_test

y_predicted

scaler.scale_

scale_factor = 1/0.00988704

y_predicted = y_predicted * scale_factor
y_test = y_test * scale_factor

#VISUALIZE THE DATA
plt.figure(figsize=(16,8))
plt.title('Model')
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price INR', fontsize=18)
plt.plot(y_test, 'r', label = 'Original price')
plt.plot(y_predicted, 'g', label = 'Predicted price')
plt.legend(['Original Price', 'Predicted Prices'])
plt.show()